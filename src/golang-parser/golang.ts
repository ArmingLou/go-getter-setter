import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

function hexlify (str:string): string {
  return str.split('')
    .map(ch => '0x' + ch.charCodeAt(0).toString(16))
    .join(', ')
}

type Struct = {
    name: string,
    fields: Field[],
}

function makeStruct(structName:string, fields:Field[]): Struct {
    return {name: structName, fields: fields}
}

type Field = {
    name: string,
    type: string,
}

function makeField(fieldName:string, type:string): Field {
    return {name: fieldName, type: type}
}

export class GoParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"pgm":3,"TYPE":4,"Id":5,"StructType":6,"EOF":7,"TypeParameters":8,"STRUCT":9,"LBRACE":10,"FieldList":11,"RBRACE":12,"Field":13,"SEMICOLON":14,"IdList":15,"Type":16,"Tag":17,"IDENT":18,"DDDTYPE":19,"COMMA":20,"STRING":21,"BSTRING":22,"LBRACKET":23,"TypeParamList":24,"RBRACKET":25,"TypeParamDecl":26,"TypeConstraint":27,"TypeElem":28,"TypeTerm":29,"VARTICALBAR":30,"UnderlyingType":31,"TILDE":32,"TypeName":33,"TypeArgs":34,"TypeLit":35,"LPAREN":36,"RPAREN":37,"QualifiedIdent":38,"TypeList":39,"ArrayType":40,"PointerType":41,"FunctionType":42,"InterfaceType":43,"SliceType":44,"MapType":45,"ChannelType":46,"ElementType":47,"MAP":48,"CHAN":49,"LARROW":50,"ArrayLength":51,"INT":52,"ASTER":53,"BaseType":54,"INTERFACE":55,"InterfaceElems":56,"InterfaceElem":57,"MethodElem":58,"MethodName":59,"Signature":60,"FUNC":61,"Parameters":62,"Result":63,"ParameterList":64,"ParameterDecl":65,"DOT":66,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"TYPE",7:"EOF",9:"STRUCT",10:"LBRACE",12:"RBRACE",14:"SEMICOLON",18:"IDENT",19:"DDDTYPE",20:"COMMA",21:"STRING",22:"BSTRING",23:"LBRACKET",25:"RBRACKET",30:"VARTICALBAR",32:"TILDE",36:"LPAREN",37:"RPAREN",48:"MAP",49:"CHAN",50:"LARROW",52:"INT",53:"ASTER",55:"INTERFACE",61:"FUNC",66:"DOT"};
    productions_: ProductionsType = [0,[3,4],[3,5],[6,4],[11,1],[11,2],[11,2],[11,3],[13,3],[13,2],[5,1],[5,1],[15,1],[15,3],[17,1],[17,1],[8,3],[8,4],[24,1],[24,3],[26,2],[27,1],[28,1],[28,3],[29,1],[29,1],[31,2],[16,1],[16,2],[16,1],[16,3],[33,1],[33,1],[34,3],[34,4],[39,1],[39,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[44,3],[45,5],[46,2],[46,3],[46,3],[40,4],[51,1],[47,1],[41,2],[54,1],[43,4],[56,1],[56,3],[56,0],[57,1],[57,1],[58,2],[59,1],[42,2],[60,1],[60,2],[63,2],[63,3],[63,4],[62,2],[62,3],[62,4],[64,1],[64,3],[65,1],[65,2],[38,3]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {10:[2,1],17:[2,2],21:[2,16],53:[2,6],55:[2,17],65:[2,52],78:[2,7]};

    constructor (yy = {}, lexer = new GoLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,4],$V1=[1,5],$V2=[1,8],$V3=[20,25],$V4=[1,42],$V5=[1,43],$V6=[1,31],$V7=[1,30],$V8=[1,47],$V9=[1,48],$Va=[1,49],$Vb=[1,44],$Vc=[1,46],$Vd=[1,45],$Ve=[1,57],$Vf=[12,14,20,25,30],$Vg=[12,14,18,19,20,21,22,25,30,37],$Vh=[12,14,18,19,20,21,22,23,25,30,37],$Vi=[1,62],$Vj=[1,70],$Vk=[1,74],$Vl=[12,14,18,19],$Vm=[12,14],$Vn=[12,14,18,19,20,21,22,25,30,36,37],$Vo=[20,37],$Vp=[2,50];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:[1,2]},{1:[3]},{5:3,18:$V0,19:$V1},{6:6,8:7,9:$V2,23:[1,9]},o([9,12,14,18,19,20,21,22,23,25,30,32,36,37,48,49,50,53,55,61,66],[2,10]),o([9,12,14,18,19,20,21,22,23,25,30,32,36,37,48,49,50,53,55,61],[2,11]),{7:[1,10]},{6:11,9:$V2},{10:[1,12]},{5:16,15:15,18:$V0,19:$V1,24:13,26:14},{1:[2,1]},{7:[1,17]},{5:16,11:18,13:19,15:20,18:$V0,19:$V1},{20:[1,22],25:[1,21]},o($V3,[2,18]),{5:32,6:35,9:$V2,16:26,18:$V0,19:$V4,23:$V5,27:23,28:24,29:25,31:27,32:$V6,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o([9,18,19,23,32,36,37,48,49,50,53,55,61],[2,12],{20:[1,50]}),{1:[2,2]},{12:[1,51]},{5:16,11:53,12:[2,4],13:19,14:[1,52],15:20,18:$V0,19:$V1},{5:32,6:35,9:$V2,16:54,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},{9:[2,16]},{5:16,15:15,18:$V0,19:$V1,25:[1,55],26:56},o($V3,[2,20]),o($V3,[2,21],{30:$Ve}),o($Vf,[2,22]),o($Vf,[2,24]),o($Vf,[2,25]),o($Vg,[2,27],{34:58,23:[1,59]}),o($Vg,[2,29]),{5:32,6:35,9:$V2,16:60,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},{5:32,6:35,9:$V2,16:61,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vh,[2,31],{66:$Vi}),o($Vh,[2,32]),o($Vg,[2,37]),o($Vg,[2,38]),o($Vg,[2,39]),o($Vg,[2,40]),o($Vg,[2,41]),o($Vg,[2,42]),o($Vg,[2,43]),o($Vg,[2,44]),o([12,14,18,19,20,21,22,23,25,30,36,37,66],[2,45]),{25:[1,64],51:63,52:[1,65]},{5:32,6:35,9:$V2,16:67,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,54:66,55:$Vc,61:$Vd},{36:$Vj,60:68,62:69},{10:[1,71]},{23:[1,72]},{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:73,48:$V8,49:$V9,50:$Vk,53:$Vb,55:$Vc,61:$Vd},{49:[1,76]},{5:16,15:77,18:$V0,19:$V1},o([7,12,14,18,19,20,21,22,25,30,37],[2,3]),{5:16,11:78,12:[2,5],13:19,15:20,18:$V0,19:$V1},{12:[2,6]},o($Vl,[2,9],{17:79,21:[1,80],22:[1,81]}),{9:[2,17]},o($V3,[2,19]),{5:32,6:35,9:$V2,16:26,18:$V0,19:$V4,23:$V5,29:82,31:27,32:$V6,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,[2,28]),{5:32,6:35,9:$V2,16:84,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,39:83,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},{37:[1,85]},o($Vf,[2,26]),{5:86,18:$V0,19:$V1},{25:[1,87]},{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:88,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},{25:[2,52]},o($Vg,[2,54]),o($Vg,[2,55]),o($Vg,[2,64]),o($Vg,[2,65],{63:89,36:[1,90]}),{5:16,15:94,18:$V0,19:$V1,37:[1,91],64:92,65:93},o($Vm,[2,59],{29:25,16:26,31:27,33:28,35:29,38:33,40:34,6:35,41:36,42:37,43:38,44:39,45:40,46:41,56:95,57:96,58:97,28:98,59:99,5:100,9:$V2,18:$V0,19:$V4,23:$V5,32:$V6,36:$V7,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd}),{5:32,6:35,9:$V2,16:101,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,[2,48]),{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:102,48:$V8,49:[1,103],50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,[2,53]),{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:104,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o([9,18,19,20,23,32,36,37,48,49,50,53,55,61],[2,13]),{12:[2,7]},o($Vl,[2,8]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vf,[2,23]),{20:[1,106],25:[1,105]},o($V3,[2,35]),o($Vg,[2,30]),o($Vh,[2,77]),{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:107,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,[2,46]),o($Vg,[2,66]),{5:16,15:94,18:$V0,19:$V1,37:[1,108],64:109,65:93},o($Vn,[2,70]),{20:[1,111],37:[1,110]},o($Vo,[2,73]),o($Vo,[2,75],{33:28,35:29,5:32,38:33,40:34,6:35,41:36,42:37,43:38,44:39,45:40,46:41,16:112,9:$V2,18:$V0,19:$V4,23:$V5,36:$V7,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd}),{12:[1,113],14:[1,114]},o($Vm,[2,57]),o($Vm,[2,60]),o($Vm,[2,61],{30:$Ve}),{36:$Vj,60:115,62:69},o([12,14,23,30,36],[2,63],{66:$Vi}),{25:[1,116]},o($Vg,[2,49]),{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:117,48:$V8,49:$V9,50:$Vk,53:$Vb,55:$Vc,61:$Vd},o($Vg,$Vp),o($Vg,[2,33]),{5:32,6:35,9:$V2,16:119,18:$V0,19:$V4,23:$V5,25:[1,118],33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,[2,51]),o($Vg,[2,67]),{20:[1,121],37:[1,120]},o($Vn,[2,71]),{5:16,15:94,18:$V0,19:$V1,37:[1,122],65:123},o($Vo,[2,76]),o($Vg,[2,56]),{5:100,6:35,9:$V2,16:26,18:$V0,19:$V4,23:$V5,28:98,29:25,31:27,32:$V6,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,57:124,58:97,59:99,61:$Vd},o($Vm,[2,62]),{5:32,6:35,9:$V2,16:75,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:41,47:125,48:$V8,49:$V9,50:$Va,53:$Vb,55:$Vc,61:$Vd},o($Vg,$Vp),o($Vg,[2,34]),o($V3,[2,36]),o($Vg,[2,68]),{5:16,15:94,18:$V0,19:$V1,37:[1,126],65:123},o($Vn,[2,72]),o($Vo,[2,74]),o($Vm,[2,58]),o($Vg,[2,47]),o($Vg,[2,69])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 if (yy.trace) yy.trace('returning', $$[$0-3]);
          return makeStruct($$[$0-2], $$[$0-1] )
break;
case 2:
 if (yy.trace) yy.trace('returning', $$[$0-4]);
          return makeStruct($$[$0-3]+$$[$0-2], $$[$0-1])
break;
case 3: case 30: case 56:
this.$ = $$[$0-1]
break;
case 4:

            this.$ = [$$[$0]];
        
break;
case 5:

            this.$ = [$$[$0-1]];
        
break;
case 6:

            $$[$0].push($$[$0-1]);
            this.$ = $$[$0]
        
break;
case 7:

            $$[$0].push($$[$0-2]);
            this.$ = $$[$0]
        
break;
case 8:
this.$ = makeField($$[$0-2], $$[$0-1])
break;
case 9: case 62:
this.$ = makeField($$[$0-1], $$[$0])
break;
case 10: case 11: case 14: case 15: case 45: case 52:
this.$ = yytext
break;
case 12: case 18: case 21: case 22: case 24: case 25: case 27: case 29: case 31: case 32: case 35: case 37: case 39: case 40: case 42: case 43: case 44: case 53: case 55: case 60: case 61: case 63: case 65: case 73: case 75:
this.$ = $$[$0]
break;
case 13: case 36: case 74:
this.$ = $$[$0-2] + ", " + $$[$0]
break;
case 16: case 33:
this.$ = "[" + $$[$0-1] + "]"
break;
case 17: case 34:
this.$ = "[" + $$[$0-2] + "]"
break;
case 19:
this.$ = $$[$0-2] + " , " + $$[$0]
break;
case 20: case 66: case 76:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 23:
this.$ = $$[$0-2] + " | " + $$[$0]
break;
case 26: case 28: case 64:
this.$ = $$[$0-1] + $$[$0]
break;
case 38:
this.$ = "struct{ " + $$[$0].map((f: Field) => (f.name + " " + f.type)).join(", ") + " }"
break;
case 41:

            if ($$[$0].length == 0) this.$ = "interface{}";
            else this.$ = "interface{ " + $$[$0].map((f: Field) => (f.name + "" + f.type)).join(", ") + " }";
        
break;
case 46:
this.$ = "[]" + $$[$0]
break;
case 47:
this.$ = "map[" + $$[$0-2] + "]" + $$[$0]
break;
case 48:
this.$ = "chan " + $$[$0]
break;
case 49:
this.$ = "chan <-" + $$[$0]
break;
case 50:
this.$ = "<-chan " + $$[$0]
break;
case 51:
this.$ = "[" + $$[$0-2] + "]" + $$[$0]
break;
case 54:
this.$ = "*" + $$[$0]
break;
case 57:
this.$ = [$$[$0]]
break;
case 58:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 59:
this.$ = []
break;
case 67: case 70:
this.$ = "()"
break;
case 68: case 71:
this.$ = "(" + $$[$0-1] + ")"
break;
case 69: case 72:
this.$ = "(" + $$[$0-2] + ")"
break;
case 77:
this.$ = $$[$0-2] + "." + $$[$0]
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class GoLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"Go"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\/\/.*)/,
        /^(?:[\s\t]+)/,
        /^(?:interface\b)/,
        /^(?:struct\b)/,
        /^(?:type\b)/,
        /^(?:map\b)/,
        /^(?:chan\b)/,
        /^(?:func\b)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:;)/,
        /^(?:\|)/,
        /^(?:\*)/,
        /^(?:~)/,
        /^(?:,)/,
        /^(?:\.\.\.)/,
        /^(?:^[a-zA-Z0-9_]+)/,
        /^(?:.+)/,
        /^(?:\.)/,
        /^(?:<-)/,
        /^(?:")/,
        /^(?:[^\"\n]+)/,
        /^(?:")/,
        /^(?:`)/,
        /^(?:[^"`"\n]+)/,
        /^(?:`)/,
        /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,
        /^(?:0[0-9]*)/,
        /^(?:[0]|[1-9][0-9]*)/,
        /^(?:$)/
    ];
    conditions: any = {"STRING":{"rules":[25,26],"inclusive":false},"BSTRING":{"rules":[28,29],"inclusive":false},"DDDTYPE":{"rules":[20,21],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,24,27,30,31,32,33],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* ignore comment */
      break;
    case 1:if (yy.trace) yy.trace(`skipping whitespace ${hexlify(yy_.yytext)}`)
      break;
    case 2:return 55
    case 3:return 9
    case 4:return 4
    case 5:return 48
    case 6:return 49
    case 7:return 61
    case 8:return 10
    case 9:return 12
    case 10:return 36
    case 11:return 37
    case 12:return 23
    case 13:return 25
    case 14:return 14;
    case 15:return 30;
    case 16:return 53;
    case 17:return 32;
    case 18:return 20;
    case 19:this.begin('DDDTYPE'); this.more();
      break;
    case 20:this.begin('INITIAL'); return 19; 
    case 21:this.more();
      break;
    case 22:return 66;
    case 23:return 50;
    case 24:this.begin('STRING');  this.more();
      break;
    case 25:this.more();
      break;
    case 26:this.begin('INITIAL'); return 21; 
    case 27:this.begin('BSTRING');  this.more();
      break;
    case 28:this.more();
      break;
    case 29:this.begin('INITIAL'); return 22;
    case 30:return 18
    case 31:throw 'integer must be [0]|([1-9][0-9]*)'
      break;
    case 32:return 52
    case 33:return 7
        }
    }
}


