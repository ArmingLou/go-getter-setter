import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

function hexlify (str:string): string {
  return str.split('')
    .map(ch => '0x' + ch.charCodeAt(0).toString(16))
    .join(', ')
}

type Struct = {
    name: string,
    fields: Field[],
}

function makeStruct(structName:string, fields:Field[]): Struct {
    return {name: structName, fields: fields}
}

type Field = {
    name: string,
    type: string,
}

function makeField(fieldName:string, type:string): Field {
    return {name: fieldName, type: type}
}

export class GoParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"pgm":3,"TYPE":4,"Id":5,"StructType":6,"EOF":7,"TypeParameters":8,"STRUCT":9,"LBRACE":10,"FieldList":11,"RBRACE":12,"Field":13,"SEMICOLON":14,"IdList":15,"Type":16,"Tag":17,"IDENT":18,"DDDTYPE":19,"COMMA":20,"STRING":21,"BSTRING":22,"LBRACKET":23,"TypeParamList":24,"RBRACKET":25,"TypeParamDecl":26,"TypeConstraint":27,"TypeElem":28,"TypeTerm":29,"VARTICALBAR":30,"UnderlyingType":31,"TILDE":32,"TypeName":33,"TypeArgs":34,"TypeLit":35,"LPAREN":36,"RPAREN":37,"QualifiedIdent":38,"TypeList":39,"ArrayType":40,"PointerType":41,"FunctionType":42,"SliceType":43,"MapType":44,"ChannelType":45,"ElementType":46,"MAP":47,"CHAN":48,"LARROW":49,"ArrayLength":50,"INT":51,"ASTER":52,"BaseType":53,"FUNC":54,"Signature":55,"Parameters":56,"Result":57,"ParameterList":58,"ParameterDecl":59,"DOT":60,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"TYPE",7:"EOF",9:"STRUCT",10:"LBRACE",12:"RBRACE",14:"SEMICOLON",18:"IDENT",19:"DDDTYPE",20:"COMMA",21:"STRING",22:"BSTRING",23:"LBRACKET",25:"RBRACKET",30:"VARTICALBAR",32:"TILDE",36:"LPAREN",37:"RPAREN",47:"MAP",48:"CHAN",49:"LARROW",51:"INT",52:"ASTER",54:"FUNC",60:"DOT"};
    productions_: ProductionsType = [0,[3,4],[3,5],[6,4],[11,1],[11,2],[11,2],[11,3],[13,3],[13,2],[5,1],[5,1],[15,1],[15,3],[17,1],[17,1],[8,3],[8,4],[24,1],[24,3],[26,2],[27,1],[28,1],[28,3],[29,1],[29,1],[31,2],[16,1],[16,2],[16,1],[16,3],[33,1],[33,1],[34,3],[34,4],[39,1],[39,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[43,3],[44,5],[45,2],[45,3],[45,3],[40,4],[50,1],[46,1],[41,2],[53,1],[42,2],[55,1],[55,2],[57,2],[57,3],[57,4],[56,2],[56,3],[56,4],[58,1],[58,3],[59,1],[59,2],[38,3]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {10:[2,1],17:[2,2],21:[2,16],51:[2,6],53:[2,17],63:[2,51],75:[2,7]};

    constructor (yy = {}, lexer = new GoLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,4],$V1=[1,5],$V2=[1,8],$V3=[20,25],$V4=[1,41],$V5=[1,42],$V6=[1,31],$V7=[1,30],$V8=[1,45],$V9=[1,46],$Va=[1,47],$Vb=[1,43],$Vc=[1,44],$Vd=[20,25,30],$Ve=[12,14,18,19,20,21,22,25,30,37],$Vf=[12,14,18,19,20,21,22,23,25,30,37],$Vg=[1,71],$Vh=[12,14,18,19],$Vi=[12,14,18,19,20,21,22,25,30,36,37],$Vj=[20,37],$Vk=[2,49];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:[1,2]},{1:[3]},{5:3,18:$V0,19:$V1},{6:6,8:7,9:$V2,23:[1,9]},o([9,12,14,18,19,20,21,22,23,25,30,32,36,37,47,48,49,52,54,60],[2,10]),o([9,12,14,18,19,20,21,22,23,25,30,32,36,37,47,48,49,52,54],[2,11]),{7:[1,10]},{6:11,9:$V2},{10:[1,12]},{5:16,15:15,18:$V0,19:$V1,24:13,26:14},{1:[2,1]},{7:[1,17]},{5:16,11:18,13:19,15:20,18:$V0,19:$V1},{20:[1,22],25:[1,21]},o($V3,[2,18]),{5:32,6:35,9:$V2,16:26,18:$V0,19:$V4,23:$V5,27:23,28:24,29:25,31:27,32:$V6,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o([9,18,19,23,32,36,37,47,48,49,52,54],[2,12],{20:[1,48]}),{1:[2,2]},{12:[1,49]},{5:16,11:51,12:[2,4],13:19,14:[1,50],15:20,18:$V0,19:$V1},{5:32,6:35,9:$V2,16:52,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},{9:[2,16]},{5:16,15:15,18:$V0,19:$V1,25:[1,53],26:54},o($V3,[2,20]),o($V3,[2,21],{30:[1,55]}),o($Vd,[2,22]),o($Vd,[2,24]),o($Vd,[2,25]),o($Ve,[2,27],{34:56,23:[1,57]}),o($Ve,[2,29]),{5:32,6:35,9:$V2,16:58,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},{5:32,6:35,9:$V2,16:59,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Vf,[2,31],{60:[1,60]}),o($Vf,[2,32]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),o($Ve,[2,42]),o($Ve,[2,43]),o([12,14,18,19,20,21,22,23,25,30,37,60],[2,44]),{25:[1,62],50:61,51:[1,63]},{5:32,6:35,9:$V2,16:65,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,53:64,54:$Vc},{36:[1,68],55:66,56:67},{23:[1,69]},{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:70,47:$V8,48:$V9,49:$Vg,52:$Vb,54:$Vc},{48:[1,73]},{5:16,15:74,18:$V0,19:$V1},o([7,12,14,18,19,20,21,22,25,30,37],[2,3]),{5:16,11:75,12:[2,5],13:19,15:20,18:$V0,19:$V1},{12:[2,6]},o($Vh,[2,9],{17:76,21:[1,77],22:[1,78]}),{9:[2,17]},o($V3,[2,19]),{5:32,6:35,9:$V2,16:26,18:$V0,19:$V4,23:$V5,29:79,31:27,32:$V6,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Ve,[2,28]),{5:32,6:35,9:$V2,16:81,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,39:80,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},{37:[1,82]},o($Vd,[2,26]),{5:83,18:$V0,19:$V1},{25:[1,84]},{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:85,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},{25:[2,51]},o($Ve,[2,53]),o($Ve,[2,54]),o($Ve,[2,55]),o($Ve,[2,56],{57:86,36:[1,87]}),{5:16,15:91,18:$V0,19:$V1,37:[1,88],58:89,59:90},{5:32,6:35,9:$V2,16:92,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Ve,[2,47]),{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:93,47:$V8,48:[1,94],49:$Va,52:$Vb,54:$Vc},o($Ve,[2,52]),{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:95,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o([9,18,19,20,23,32,36,37,47,48,49,52,54],[2,13]),{12:[2,7]},o($Vh,[2,8]),o($Vh,[2,14]),o($Vh,[2,15]),o($Vd,[2,23]),{20:[1,97],25:[1,96]},o($V3,[2,35]),o($Ve,[2,30]),o($Vf,[2,68]),{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:98,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Ve,[2,45]),o($Ve,[2,57]),{5:16,15:91,18:$V0,19:$V1,37:[1,99],58:100,59:90},o($Vi,[2,61]),{20:[1,102],37:[1,101]},o($Vj,[2,64]),o($Vj,[2,66],{33:28,35:29,5:32,38:33,40:34,6:35,41:36,42:37,43:38,44:39,45:40,16:103,9:$V2,18:$V0,19:$V4,23:$V5,36:$V7,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc}),{25:[1,104]},o($Ve,[2,48]),{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:105,47:$V8,48:$V9,49:$Vg,52:$Vb,54:$Vc},o($Ve,$Vk),o($Ve,[2,33]),{5:32,6:35,9:$V2,16:107,18:$V0,19:$V4,23:$V5,25:[1,106],33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Ve,[2,50]),o($Ve,[2,58]),{20:[1,109],37:[1,108]},o($Vi,[2,62]),{5:16,15:91,18:$V0,19:$V1,37:[1,110],59:111},o($Vj,[2,67]),{5:32,6:35,9:$V2,16:72,18:$V0,19:$V4,23:$V5,33:28,35:29,36:$V7,38:33,40:34,41:36,42:37,43:38,44:39,45:40,46:112,47:$V8,48:$V9,49:$Va,52:$Vb,54:$Vc},o($Ve,$Vk),o($Ve,[2,34]),o($V3,[2,36]),o($Ve,[2,59]),{5:16,15:91,18:$V0,19:$V1,37:[1,113],59:111},o($Vi,[2,63]),o($Vj,[2,65]),o($Ve,[2,46]),o($Ve,[2,60])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 if (yy.trace) yy.trace('returning', $$[$0-3]);
          return makeStruct($$[$0-2], $$[$0-1] )
break;
case 2:
 if (yy.trace) yy.trace('returning', $$[$0-4]);
          return makeStruct($$[$0-3]+$$[$0-2], $$[$0-1])
break;
case 3: case 30:
this.$ = $$[$0-1]
break;
case 4:

            this.$ = [$$[$0]];
        
break;
case 5:

            this.$ = [$$[$0-1]];
        
break;
case 6:

            $$[$0].push($$[$0-1]);
            this.$ = $$[$0]
        
break;
case 7:

            $$[$0].push($$[$0-2]);
            this.$ = $$[$0]
        
break;
case 8:
this.$ = makeField($$[$0-2], $$[$0-1])
break;
case 9:
this.$ = makeField($$[$0-1], $$[$0])
break;
case 10: case 11: case 14: case 15: case 44: case 51:
this.$ = yytext
break;
case 12: case 18: case 21: case 22: case 24: case 25: case 27: case 29: case 31: case 32: case 35: case 37: case 39: case 40: case 41: case 42: case 43: case 52: case 54: case 56: case 64: case 66:
this.$ = $$[$0]
break;
case 13: case 36: case 65:
this.$ = $$[$0-2] + ", " + $$[$0]
break;
case 16: case 33:
this.$ = "[" + $$[$0-1] + "]"
break;
case 17: case 34:
this.$ = "[" + $$[$0-2] + "]"
break;
case 19:
this.$ = $$[$0-2] + " , " + $$[$0]
break;
case 20: case 55: case 57: case 67:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 23:
this.$ = $$[$0-2] + " | " + $$[$0]
break;
case 26: case 28:
this.$ = $$[$0-1] + $$[$0]
break;
case 38:
this.$ = "struct{ " + $$[$0].map((f: Field) => (f.name + " " + f.type)).join(", ") + " }"
break;
case 45:
this.$ = "[]" + $$[$0]
break;
case 46:
this.$ = "map[" + $$[$0-2] + "]" + $$[$0]
break;
case 47:
this.$ = "chan " + $$[$0]
break;
case 48:
this.$ = "chan <-" + $$[$0]
break;
case 49:
this.$ = "<-chan " + $$[$0]
break;
case 50:
this.$ = "[" + $$[$0-2] + "]" + $$[$0]
break;
case 53:
this.$ = "*" + $$[$0]
break;
case 58: case 61:
this.$ = "()"
break;
case 59: case 62:
this.$ = "(" + $$[$0-1] + ")"
break;
case 60: case 63:
this.$ = "(" + $$[$0-2] + ")"
break;
case 68:
this.$ = $$[$0-2] + "." + $$[$0]
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class GoLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"Go"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\/\/.*)/,
        /^(?:[\s\t]+)/,
        /^(?:struct\b)/,
        /^(?:type\b)/,
        /^(?:map\b)/,
        /^(?:chan\b)/,
        /^(?:func\b)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:;)/,
        /^(?:\|)/,
        /^(?:\*)/,
        /^(?:~)/,
        /^(?:,)/,
        /^(?:\.\.\.)/,
        /^(?:^[a-zA-Z0-9_]+)/,
        /^(?:.+)/,
        /^(?:\.)/,
        /^(?:<-)/,
        /^(?:")/,
        /^(?:[^\"\n]+)/,
        /^(?:")/,
        /^(?:`)/,
        /^(?:[^"`"\n]+)/,
        /^(?:`)/,
        /^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,
        /^(?:0[0-9]*)/,
        /^(?:[0]|[1-9][0-9]*)/,
        /^(?:$)/
    ];
    conditions: any = {"STRING":{"rules":[24,25],"inclusive":false},"BSTRING":{"rules":[27,28],"inclusive":false},"DDDTYPE":{"rules":[19,20],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,26,29,30,31,32],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* ignore comment */
      break;
    case 1:if (yy.trace) yy.trace(`skipping whitespace ${hexlify(yy_.yytext)}`)
      break;
    case 2:return 9
    case 3:return 4
    case 4:return 47
    case 5:return 48
    case 6:return 54
    case 7:return 10
    case 8:return 12
    case 9:return 36
    case 10:return 37
    case 11:return 23
    case 12:return 25
    case 13:return 14;
    case 14:return 30;
    case 15:return 52;
    case 16:return 32;
    case 17:return 20;
    case 18:this.begin('DDDTYPE'); this.more();
      break;
    case 19:this.begin('INITIAL'); return 19; 
    case 20:this.more();
      break;
    case 21:return 60;
    case 22:return 49;
    case 23:this.begin('STRING');  this.more();
      break;
    case 24:this.more();
      break;
    case 25:this.begin('INITIAL'); return 21; 
    case 26:this.begin('BSTRING');  this.more();
      break;
    case 27:this.more();
      break;
    case 28:this.begin('INITIAL'); return 22;
    case 29:return 18
    case 30:throw 'integer must be [0]|([1-9][0-9]*)'
      break;
    case 31:return 51
    case 32:return 7
        }
    }
}


