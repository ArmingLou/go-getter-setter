import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

function hexlify (str:string): string {
  return str.split('')
    .map(ch => '0x' + ch.charCodeAt(0).toString(16))
    .join(', ')
}

type Struct = {
    name: string,
    fields: Field[],
}

function makeStruct(structName:string, fields:Field[]): Struct {
    return {name: structName, fields: fields}
}

type Field = {
    name: string,
    type: string,
}

function makeField(fieldName:string, type:string): Field {
    return {name: fieldName, type: type}
}

export class GoParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"pgm":3,"TYPE":4,"Id":5,"StructType":6,"EOF":7,"TypeParameters":8,"STRUCT":9,"LBRACE":10,"FieldList":11,"RBRACE":12,"Field":13,"SEMICOLON":14,"IdList":15,"Type":16,"Tag":17,"IDENT":18,"COMMA":19,"STRING":20,"BSTRING":21,"LBRACKET":22,"TypeParamList":23,"RBRACKET":24,"TypeParamDecl":25,"TypeConstraint":26,"TypeElem":27,"TypeTerm":28,"VARTICALBAR":29,"UnderlyingType":30,"TILDE":31,"TypeName":32,"TypeArgs":33,"TypeLit":34,"LPAREN":35,"RPAREN":36,"QualifiedIdent":37,"TypeList":38,"ArrayType":39,"PointerType":40,"SliceType":41,"MapType":42,"ChannelType":43,"ElementType":44,"MAP":45,"CHAN":46,"LARROW":47,"ArrayLength":48,"INT":49,"ASTER":50,"BaseType":51,"DOT":52,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",4:"TYPE",7:"EOF",9:"STRUCT",10:"LBRACE",12:"RBRACE",14:"SEMICOLON",18:"IDENT",19:"COMMA",20:"STRING",21:"BSTRING",22:"LBRACKET",24:"RBRACKET",29:"VARTICALBAR",31:"TILDE",35:"LPAREN",36:"RPAREN",45:"MAP",46:"CHAN",47:"LARROW",49:"INT",50:"ASTER",52:"DOT"};
    productions_: ProductionsType = [0,[3,4],[3,5],[6,4],[11,1],[11,2],[11,2],[11,3],[13,3],[13,2],[5,1],[15,1],[15,3],[17,1],[17,1],[8,3],[8,4],[23,1],[23,3],[25,2],[26,1],[27,1],[27,3],[28,1],[28,1],[30,2],[16,1],[16,2],[16,1],[16,3],[32,1],[32,1],[33,3],[33,4],[38,1],[38,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[41,3],[42,5],[43,2],[43,3],[43,3],[39,4],[48,1],[44,1],[40,2],[51,1],[37,3]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {9:[2,1],16:[2,2],20:[2,15],47:[2,6],49:[2,16],59:[2,48],68:[2,7]};

    constructor (yy = {}, lexer = new GoLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,4],$V1=[1,7],$V2=[19,24],$V3=[1,39],$V4=[1,30],$V5=[1,29],$V6=[1,41],$V7=[1,42],$V8=[1,43],$V9=[1,40],$Va=[9,18,22,31,35,45,46,47,50],$Vb=[19,24,29],$Vc=[12,14,18,19,20,21,24,29,36],$Vd=[12,14,18,19,20,21,22,24,29,36],$Ve=[1,64],$Vf=[12,14,18],$Vg=[2,46];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:[1,2]},{1:[3]},{5:3,18:$V0},{6:5,8:6,9:$V1,22:[1,8]},o([9,12,14,18,19,20,21,22,24,29,31,35,36,45,46,47,50,52],[2,10]),{7:[1,9]},{6:10,9:$V1},{10:[1,11]},{5:15,15:14,18:$V0,23:12,25:13},{1:[2,1]},{7:[1,16]},{5:15,11:17,13:18,15:19,18:$V0},{19:[1,21],24:[1,20]},o($V2,[2,17]),{5:31,6:34,9:$V1,16:25,18:$V0,22:$V3,26:22,27:23,28:24,30:26,31:$V4,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},o($Va,[2,11],{19:[1,44]}),{1:[2,2]},{12:[1,45]},{5:15,11:47,12:[2,4],13:18,14:[1,46],15:19,18:$V0},{5:31,6:34,9:$V1,16:48,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},{9:[2,15]},{5:15,15:14,18:$V0,24:[1,49],25:50},o($V2,[2,19]),o($V2,[2,20],{29:[1,51]}),o($Vb,[2,21]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vc,[2,26],{33:52,22:[1,53]}),o($Vc,[2,28]),{5:31,6:34,9:$V1,16:54,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},{5:31,6:34,9:$V1,16:55,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},o($Vd,[2,30],{52:[1,56]}),o($Vd,[2,31]),o($Vc,[2,36]),o($Vc,[2,37]),o($Vc,[2,38]),o($Vc,[2,39]),o($Vc,[2,40]),o($Vc,[2,41]),{24:[1,58],48:57,49:[1,59]},{5:31,6:34,9:$V1,16:61,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9,51:60},{22:[1,62]},{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:63,45:$V6,46:$V7,47:$Ve,50:$V9},{46:[1,66]},{5:15,15:67,18:$V0},o([7,12,14,18,19,20,21,24,29,36],[2,3]),{5:15,11:68,12:[2,5],13:18,15:19,18:$V0},{12:[2,6]},o($Vf,[2,9],{17:69,20:[1,70],21:[1,71]}),{9:[2,16]},o($V2,[2,18]),{5:31,6:34,9:$V1,16:25,18:$V0,22:$V3,28:72,30:26,31:$V4,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},o($Vc,[2,27]),{5:31,6:34,9:$V1,16:74,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,38:73,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},{36:[1,75]},o($Vb,[2,25]),{5:76,18:$V0},{24:[1,77]},{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:78,45:$V6,46:$V7,47:$V8,50:$V9},{24:[2,48]},o($Vc,[2,50]),o($Vc,[2,51]),{5:31,6:34,9:$V1,16:79,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},o($Vc,[2,44]),{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:80,45:$V6,46:[1,81],47:$V8,50:$V9},o($Vc,[2,49]),{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:82,45:$V6,46:$V7,47:$V8,50:$V9},o($Va,[2,12]),{12:[2,7]},o($Vf,[2,8]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vb,[2,22]),{19:[1,84],24:[1,83]},o($V2,[2,34]),o($Vc,[2,29]),o($Vd,[2,52]),{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:85,45:$V6,46:$V7,47:$V8,50:$V9},o($Vc,[2,42]),{24:[1,86]},o($Vc,[2,45]),{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:87,45:$V6,46:$V7,47:$Ve,50:$V9},o($Vc,$Vg),o($Vc,[2,32]),{5:31,6:34,9:$V1,16:89,18:$V0,22:$V3,24:[1,88],32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,45:$V6,46:$V7,47:$V8,50:$V9},o($Vc,[2,47]),{5:31,6:34,9:$V1,16:65,18:$V0,22:$V3,32:27,34:28,35:$V5,37:32,39:33,40:35,41:36,42:37,43:38,44:90,45:$V6,46:$V7,47:$V8,50:$V9},o($Vc,$Vg),o($Vc,[2,33]),o($V2,[2,35]),o($Vc,[2,43])];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
 if (yy.trace) yy.trace('returning', $$[$0-3]);
          return makeStruct($$[$0-2], $$[$0-1] )
break;
case 2:
 if (yy.trace) yy.trace('returning', $$[$0-4]);
          return makeStruct($$[$0-3]+$$[$0-2], $$[$0-1])
break;
case 3: case 29:
this.$ = $$[$0-1]
break;
case 4:

            this.$ = [$$[$0]];
        
break;
case 5:

            this.$ = [$$[$0-1]];
        
break;
case 6:

            $$[$0].push($$[$0-1]);
            this.$ = $$[$0]
        
break;
case 7:

            $$[$0].push($$[$0-2]);
            this.$ = $$[$0]
        
break;
case 8:
this.$ = makeField($$[$0-2], $$[$0-1])
break;
case 9:
this.$ = makeField($$[$0-1], $$[$0])
break;
case 10: case 13: case 14: case 48:
this.$ = yytext
break;
case 11: case 17: case 20: case 21: case 23: case 24: case 26: case 28: case 30: case 31: case 34: case 36: case 38: case 39: case 40: case 41: case 49: case 51:
this.$ = $$[$0]
break;
case 12: case 35:
this.$ = $$[$0-2] + ", " + $$[$0]
break;
case 15: case 32:
this.$ = "[" + $$[$0-1] + "]"
break;
case 16: case 33:
this.$ = "[" + $$[$0-2] + "]"
break;
case 18:
this.$ = $$[$0-2] + " , " + $$[$0]
break;
case 19:
this.$ = $$[$0-1] + " " + $$[$0]
break;
case 22:
this.$ = $$[$0-2] + " | " + $$[$0]
break;
case 25: case 27:
this.$ = $$[$0-1] + $$[$0]
break;
case 37:
this.$ = "struct{ " + $$[$0].map((f: Field) => (f.name + " " + f.type)).join(", ") + " }"
break;
case 42:
this.$ = "[]" + $$[$0]
break;
case 43:
this.$ = "map[" + $$[$0-2] + "]" + $$[$0]
break;
case 44:
this.$ = "chan " + $$[$0]
break;
case 45:
this.$ = "chan <-" + $$[$0]
break;
case 46:
this.$ = "<-chan " + $$[$0]
break;
case 47:
this.$ = "[" + $$[$0-2] + "]" + $$[$0]
break;
case 50:
this.$ = "*" + $$[$0]
break;
case 52:
this.$ = $$[$0-2] + "." + $$[$0]
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class GoLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"moduleName":"Go"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:\/\/.*)/,
        /^(?:[\s\t]+)/,
        /^(?:struct\b)/,
        /^(?:type\b)/,
        /^(?:map\b)/,
        /^(?:chan\b)/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\[)/,
        /^(?:\])/,
        /^(?:;)/,
        /^(?:\|)/,
        /^(?:\*)/,
        /^(?:~)/,
        /^(?:,)/,
        /^(?:\.\.\.)/,
        /^(?:\.)/,
        /^(?:<-)/,
        /^(?:")/,
        /^(?:[^\"\n]+)/,
        /^(?:")/,
        /^(?:`)/,
        /^(?:[^"`"\n]+)/,
        /^(?:`)/,
        /^(?:[a-zA-Z_][a-zA-Z0-9]*)/,
        /^(?:0[0-9]*)/,
        /^(?:[0]|[1-9][0-9]*)/,
        /^(?:$)/
    ];
    conditions: any = {"STRING":{"rules":[21,22],"inclusive":false},"BSTRING":{"rules":[24,25],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,26,27,28,29],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:/* ignore comment */
      break;
    case 1:if (yy.trace) yy.trace(`skipping whitespace ${hexlify(yy_.yytext)}`)
      break;
    case 2:return 9
    case 3:return 4
    case 4:return 45
    case 5:return 46
    case 6:return 10
    case 7:return 12
    case 8:return 35
    case 9:return 36
    case 10:return 22
    case 11:return 24
    case 12:return 14;
    case 13:return 29;
    case 14:return 50;
    case 15:return 31;
    case 16:return 19;
    case 17:return 'DOTDOTDORT';
    case 18:return 52;
    case 19:return 47;
    case 20:this.begin('STRING');  this.more();
      break;
    case 21:this.more();
      break;
    case 22:this.begin('INITIAL'); return 20; 
    case 23:this.begin('BSTRING');  this.more();
      break;
    case 24:this.more();
      break;
    case 25:this.begin('INITIAL'); return 21;
    case 26:return 18
    case 27:throw 'integer must be [0]|([1-9][0-9]*)'
      break;
    case 28:return 49
    case 29:return 7
        }
    }
}


